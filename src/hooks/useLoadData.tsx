import { useEffect } from "react";
import useAuthStore from "../store/storeAuth";
import useBoardsStore, { type IBoard } from "../store/storeBoards";
import useTasksStore, { type ITasks } from "../store/storeTasks";
import { BoardsAPI, TasksAPI } from "../api/client";
import type { IApiResponse } from "../api/types";

/**
 * –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const useLoadData = () => {
  const user = useAuthStore((state) => state.user);
  const isAuthenticated = useAuthStore((state) => state.isAuthenticated);
  const setBoards = useBoardsStore((state) => state.setBoards);
  const setTasks = useTasksStore((state) => state.setTasks);

  useEffect(() => {
    console.log("üîÑ useLoadData triggered:", { isAuthenticated, user: user?.username });
    
    const loadData = async () => {
      if (!isAuthenticated || !user) {
        console.log("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ");
        setBoards([]);
        setTasks([]);
        return;
      }

      try {
        console.log("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.username);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const boardsResponse = await BoardsAPI.getAll(user.id) as IApiResponse<{ boards: IBoard[], total: number }>;
        
        if (boardsResponse.success) {
          console.log("‚úÖ –î–æ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", boardsResponse.data.boards.length);
          console.log("üìã –î–æ—Å–∫–∏ –¥–∞–Ω–Ω—ã–µ:", boardsResponse.data.boards);
          setBoards(boardsResponse.data.boards);
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å–æ–∫:", boardsResponse);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const tasksResponse = await TasksAPI.getUserTasks(user.id) as IApiResponse<{ tasks: ITasks[], total: number }>;
        
        if (tasksResponse.success) {
          console.log("‚úÖ –ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", tasksResponse.data.tasks.length);
          setTasks(tasksResponse.data.tasks);
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      }
    };

    loadData();
  }, [isAuthenticated, user, setBoards, setTasks]);
};

export default useLoadData;

