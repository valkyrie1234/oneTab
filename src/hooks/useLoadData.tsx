import { useEffect, useRef, useCallback } from "react";
import useAuthStore from "../store/storeAuth";
import useBoardsStore, { type IBoard } from "../store/storeBoards";
import useTasksStore, { type ITasks } from "../store/storeTasks";
import { BoardsAPI, TasksAPI, UsersAPI } from "../api/client";
import type { IApiResponse, IUser } from "../api/types";

/**
 * –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const useLoadData = () => {
  const user = useAuthStore((state) => state.user);
  const isAuthenticated = useAuthStore((state) => state.isAuthenticated);
  const updateUser = useAuthStore((state) => state.updateUser);
  const setBoards = useBoardsStore((state) => state.setBoards);
  const setTasks = useTasksStore((state) => state.setTasks);
  
  // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  const hasLoadedRef = useRef(false);
  const currentUserIdRef = useRef<string | null>(null);
  const isLoadingRef = useRef(false);

  useEffect(() => {
    const userId = user?.id;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!isAuthenticated || !userId) {
      console.log("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ");
      setBoards([]);
      setTasks([]);
      hasLoadedRef.current = false;
      currentUserIdRef.current = null;
      return;
    }
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–Ω–æ–≤–∞
    if (hasLoadedRef.current && currentUserIdRef.current === userId) {
      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
      return;
    }
    
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –µ—â–µ –æ–¥–Ω—É
    if (isLoadingRef.current) {
      console.log("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...");
      return;
    }
    
    console.log("üîÑ useLoadData triggered –¥–ª—è:", userId);
    
    const loadData = async () => {
      isLoadingRef.current = true;
      
      try {
        console.log("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.username);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ XP, Gold, Level)
        const profileResponse = await UsersAPI.getProfile(userId) as IApiResponse<{ user: IUser }>;
        
        if (profileResponse.success) {
          console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:", profileResponse.data.user);
          updateUser({
            xp: profileResponse.data.user.xp,
            gold: profileResponse.data.user.gold,
            level: profileResponse.data.user.level
          });
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", profileResponse);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const boardsResponse = await BoardsAPI.getAll(userId) as IApiResponse<{ boards: IBoard[], total: number }>;
        
        if (boardsResponse.success) {
          console.log("‚úÖ –î–æ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", boardsResponse.data.boards.length);
          setBoards(boardsResponse.data.boards);
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å–æ–∫:", boardsResponse);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const tasksResponse = await TasksAPI.getUserTasks(userId) as IApiResponse<{ tasks: ITasks[], total: number }>;
        
        if (tasksResponse.success) {
          console.log("‚úÖ –ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", tasksResponse.data.tasks.length);
          setTasks(tasksResponse.data.tasks);
        }
        
        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        hasLoadedRef.current = true;
        currentUserIdRef.current = userId;
        
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      } finally {
        isLoadingRef.current = false;
      }
    };

    loadData();
  }, [isAuthenticated, user?.id]); // –¢–æ–ª—å–∫–æ userId, –Ω–µ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç user!
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const refreshData = useCallback(() => {
    hasLoadedRef.current = false;
  }, []);
  
  return { refreshData };
};

export default useLoadData;

