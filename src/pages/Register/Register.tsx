import { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import useAuthStore from "../../store/storeAuth";
import { AuthAPI } from "../../api/client";
import type { IApiResponse, IAuthRegisterResponse } from "../../api/types";
import styles from "../Login/Login.module.css";

const Register = () => {
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const login = useAuthStore((state) => state.login);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (password !== confirmPassword) {
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      return;
    }

    if (password.length < 6) {
      setError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
      return;
    }

    if (username.length < 3) {
      setError("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞");
      return;
    }

    setLoading(true);

    try {
      const response = await AuthAPI.register(username, email, password) as IApiResponse<IAuthRegisterResponse>;

      if (response.success) {
        const { user, tokens } = response.data;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        login(user, tokens.accessToken, tokens.refreshToken);
        localStorage.setItem("accessToken", tokens.accessToken);
        localStorage.setItem("refreshToken", tokens.refreshToken);

        // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ USER)
        navigate("/");
      } else {
        setError(response.error || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.formCard}>
        <h1 className={styles.title}>‚ú® –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø</h1>
        <p className={styles.subtitle}>–°–æ–∑–¥–∞–π –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!</p>

        {error && <div className={styles.error}>‚ùå {error}</div>}

        <form onSubmit={handleSubmit} className={styles.form}>
          <div className={styles.inputGroup}>
            <label className={styles.label}>üë§ –ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</label>
            <input
              type="text"
              className={styles.input}
              placeholder="player1"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
              minLength={3}
            />
          </div>

          <div className={styles.inputGroup}>
            <label className={styles.label}>üìß EMAIL</label>
            <input
              type="email"
              className={styles.input}
              placeholder="your@email.com"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          <div className={styles.inputGroup}>
            <label className={styles.label}>üîí –ü–ê–†–û–õ–¨</label>
            <input
              type="password"
              className={styles.input}
              placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              minLength={6}
            />
          </div>

          <div className={styles.inputGroup}>
            <label className={styles.label}>üîë –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–ê–†–û–õ–Ø</label>
            <input
              type="password"
              className={styles.input}
              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              minLength={6}
            />
          </div>

          <button
            type="submit"
            className={styles.submitButton}
            disabled={loading}
          >
            {loading ? "‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "üéâ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø"}
          </button>
        </form>

        <div className={styles.switchLink}>
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{" "}
          <Link to="/login">–í–æ–π—Ç–∏</Link>
        </div>
      </div>
    </div>
  );
};

export default Register;

