import React, { useEffect, useMemo } from 'react';
import useStatisticsStore from '../../store/storeStatistics';
import usePagination from '../../hooks/usePagination';
import { Pagination } from '../../uiKit/Pagination';
import { createChartsConfig, ChartConfig } from '../../config/chartsConfig';
import styles from './Statistics.module.css';

const Statistics: React.FC = () => {
  const { statistics, loading, error, fetchStatistics } = useStatisticsStore();

  useEffect(() => {
    fetchStatistics();
  }, [fetchStatistics]);

  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const chartsData = useMemo((): ChartConfig[] => {
    if (!statistics) return [];
    return createChartsConfig(statistics);
  }, [statistics]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const {
    paginatedItems: paginatedCharts,
    currentPage,
    totalPages,
    goToPage
  } = usePagination(chartsData, 3);

  if (loading) {
    return (
      <div className={styles.statisticsPage}>
        <div className={styles.loadingState}>
          <div className={styles.loadingIcon}>üìä</div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.statisticsPage}>
        <div className={styles.errorState}>
          <div className={styles.errorIcon}>‚ùå</div>
          <p>{error}</p>
        </div>
      </div>
    );
  }

  if (!statistics) return null;

  return (
    <div className={styles.statisticsPage}>
      <div className={styles.pageHeader}>
        <h1 className={styles.pageTitle}>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h1>
        <p className={styles.pageSubtitle}>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏</p>
      </div>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ */}
      <div className={styles.statsCards}>
        <div className={styles.statsCard}>
          <div className={styles.cardIcon}>üë•</div>
          <div className={styles.cardContent}>
            <div className={styles.cardValue}>{statistics.totalUsers}</div>
            <div className={styles.cardLabel}>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
          </div>
        </div>

        <div className={styles.statsCard}>
          <div className={styles.cardIcon}>üìã</div>
          <div className={styles.cardContent}>
            <div className={styles.cardValue}>{statistics.totalTasks}</div>
            <div className={styles.cardLabel}>–í—Å–µ–≥–æ –∑–∞–¥–∞—á</div>
          </div>
        </div>

        <div className={styles.statsCard}>
          <div className={styles.cardIcon}>üìà</div>
          <div className={styles.cardContent}>
            <div className={styles.cardValue}>{statistics.avgTasksPerDay}</div>
            <div className={styles.cardLabel}>–ó–∞–¥–∞—á –≤ –¥–µ–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ)</div>
          </div>
        </div>
      </div>

      {/* –ì—Ä–∞—Ñ–∏–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π */}
      <div className={styles.chartsSection}>
        <div className={styles.chartsGrid}>
          {paginatedCharts.map((chart) => (
            <div key={chart.id} className={styles.chartCard}>
              <h3 className={styles.chartTitle}>{chart.title}</h3>
              {chart.component}
            </div>
          ))}
        </div>

        {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
        {totalPages > 1 && (
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={goToPage}
            itemsPerPage={3}
            totalItems={chartsData.length}
            showInfo={true}
          />
        )}
      </div>
    </div>
  );
};

export default Statistics;
