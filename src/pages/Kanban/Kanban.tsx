import React from "react";
import styles from "./Kanban.module.css";
import Board from "../../Components/Board/Board";
import useBoardsStore from "../../store/storeBoards";
import useTasksStore from "../../store/storeTasks";
import useNotificationStore from "../../store/storeNotifications";
import useAuthStore from "../../store/storeAuth";
import useExpiredTasksChecker from "../../hooks/useExpiredTasksChecker";
import { TasksAPI } from "../../api/client";
import type { IApiResponse } from "../../api/types";
import {
  DndContext,
  DragEndEvent,
  DragStartEvent,
  MouseSensor,
  useSensor,
  useSensors,
  closestCenter,
  DragOverlay,
} from "@dnd-kit/core";

const Kanban = () => {
  const boards = useBoardsStore((state) => state.boards);
  const { moveTask, tasks, updateTask } = useTasksStore();
  const addNotification = useNotificationStore((state) => state.addNotification);
  const { updateUser } = useAuthStore();
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –¥–æ—Å–∫–∏
  const allTasksBoard = boards.find(b => b.name === 'all tasks');
  const otherBoards = boards.filter(b => b.name !== 'all tasks').sort((a, b) => a.order - b.order);
  
  // Debug
  React.useEffect(() => {
    console.log('üìã Kanban render - Boards count:', boards.length);
    console.log('üìã All Tasks board:', allTasksBoard);
    console.log('üìã Other boards:', otherBoards);
  }, [boards]);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  useExpiredTasksChecker();

  const sensors = useSensors(
    useSensor(MouseSensor, {
      activationConstraint: {
        distance: 5,
      },
    })
  );

  const [activeId, setActiveId] = React.useState<string | null>(null);

  const handleDragStart = (event: DragStartEvent) => {
    setActiveId(event.active.id as string);
  };

  const handleDragEnd = async (event: DragEndEvent) => {
    const { active, over } = event;

    setActiveId(null);

    if (!over || !active) {
      return;
    }

    const taskId = active.id as string;
    const newBoardId = over.id as string;  // UUID —Å—Ç—Ä–æ–∫–∞
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –∏ —Å—Ç–∞—Ä—É—é –¥–æ—Å–∫—É
    const task = tasks.find(t => t.id === taskId);
    const oldBoardId = task?.boardId;
    
    // –ï—Å–ª–∏ –¥–æ—Å–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (oldBoardId === newBoardId) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
    if (task?.isCompleted) {
      addNotification(
        "warning",
        "–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É.",
        "‚ö†Ô∏è",
        4000
      );
      return;
    }

    if (task?.isFailed) {
      addNotification(
        "warning",
        "–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —É–∂–µ –ø—Ä–æ–≤–∞–ª–µ–Ω! –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É.",
        "‚ö†Ô∏è",
        4000
      );
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏–º–µ–Ω–∞ –¥–æ—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const newBoard = boards.find(b => b.id === newBoardId);
    const boardName = newBoard?.name || 'unknown';
    
    console.log('üéØ DragEnd event:', { taskId, oldBoardId, newBoardId, boardName });

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ victory - –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É —Å –Ω–∞–≥—Ä–∞–¥–æ–π
    if (boardName === 'victory') {
      try {
        type CompleteResponse = {
          message: string;
          task: {
            id: string;
            completedAt: string;
            isCompleted: boolean;
            boardId: string;
          };
          user: {
            id: string;
            xp: number;
            gold: number;
            level: number;
          };
          reward: {
            xp: number;
            coins: number;
          };
        };

        const response = await TasksAPI.complete(taskId, newBoardId) as IApiResponse<CompleteResponse>;
        
        if (response.success) {
          const { task: completedTask, user: updatedUserData, reward } = response.data;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ store (backend —É–∂–µ –æ–±–Ω–æ–≤–∏–ª boardId)
          updateTask(taskId, {
            isCompleted: true,
            completedAt: completedTask.completedAt,
            boardId: completedTask.boardId
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          updateUser({
            xp: updatedUserData.xp,
            gold: updatedUserData.gold,
            level: updatedUserData.level
          });
          
          console.log('üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–≥—Ä–∞–¥–∞:', reward);
          
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ
          addNotification(
            "success",
            `üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! +${reward.xp} XP, +${reward.coins} –∑–æ–ª–æ—Ç–∞!`,
            "üèÜ",
            6000
          );
        } else {
          // –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
          if (oldBoardId) {
            await moveTask(taskId, oldBoardId);
          }
          
          addNotification(
            "error",
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç",
            "‚ò†Ô∏è",
            5000
          );
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
        
        // –û—Ç–∫–∞—Ç
        if (oldBoardId) {
          await moveTask(taskId, oldBoardId);
        }
        
        addNotification(
          "error",
          "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç",
          "‚ò†Ô∏è",
          5000
        );
      }
    } else if (boardName === 'defeat') {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ defeat - –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É (–±–µ–∑ –Ω–∞–≥—Ä–∞–¥)
      try {
        type FailResponse = {
          message: string;
          task: {
            id: string;
            isFailed: boolean;
            boardId: string;
          };
        };

        const response = await TasksAPI.fail(taskId, newBoardId) as IApiResponse<FailResponse>;
        
        if (response.success) {
          const { task: failedTask } = response.data;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ store (backend —É–∂–µ –æ–±–Ω–æ–≤–∏–ª boardId)
          updateTask(taskId, {
            isFailed: true,
            boardId: failedTask.boardId
          });
          
          console.log('üíÄ –ö–≤–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω');
          
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–∞–ª–µ
          addNotification(
            "error",
            `üíÄ –ö–≤–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω... –£—á–∏—Ç–µ—Å—å –Ω–∞ –æ—à–∏–±–∫–∞—Ö!`,
            "‚ò†Ô∏è",
            5000
          );
        } else {
          // –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
          if (oldBoardId) {
            await moveTask(taskId, oldBoardId);
          }
          
          addNotification(
            "error",
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç",
            "‚ò†Ô∏è",
            5000
          );
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
        
        // –û—Ç–∫–∞—Ç
        if (oldBoardId) {
          await moveTask(taskId, oldBoardId);
        }
        
        addNotification(
          "error",
          "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç",
          "‚ò†Ô∏è",
          5000
        );
      }
    } else {
      // –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥—É—é –¥–æ—Å–∫—É (–Ω–µ victory –∏ –Ω–µ defeat)
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      await moveTask(taskId, newBoardId);

      try {
        const response = await TasksAPI.update(taskId, { boardId: newBoardId }) as { success: boolean };
        
        if (response.success) {
          console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å backend');
          
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
          addNotification(
            "info",
            `–ö–≤–µ—Å—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ "${boardName}"`,
            "üì¶",
            3000
          );
        } else {
          // –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
          if (oldBoardId) {
            await moveTask(taskId, oldBoardId);
          }
          
          addNotification(
            "error",
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º",
            "‚ò†Ô∏è",
            5000
          );
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        
        // –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (oldBoardId) {
          await moveTask(taskId, oldBoardId);
        }
        
        addNotification(
          "error",
          "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º",
          "‚ò†Ô∏è",
          5000
        );
      }
    }
  };

  const activeTask = tasks.find((task) => task.id === activeId);

  return (
    <DndContext
      onDragStart={handleDragStart}
      onDragEnd={handleDragEnd}
      sensors={sensors}
      collisionDetection={closestCenter}
    >
      <div className={styles.trelloContainer}>
        <div className={styles.allBoardsContainer}>
          {/* All Tasks - –æ—Ç–¥–µ–ª—å–Ω–∞—è –±–æ–ª—å—à–∞—è –¥–æ—Å–∫–∞ */}
          {allTasksBoard && (
            <div className={styles.allTasksSection}>
              <Board {...allTasksBoard} title={allTasksBoard.name} />
            </div>
          )}

          {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å–∫–∏ (start, in progress, victory, defeat) */}
          <div className={styles.kanbanBoardsContainer}>
            {otherBoards.map((board) => (
              <Board
                {...board}
                title={board.name}
                key={board.id}
              />
            ))}
          </div>
        </div>
      </div>

      <DragOverlay>
        {activeTask ? (
          <div className={styles.dragOverlay}>
            <div className={styles.dragOverlayContent}>{activeTask.title}</div>
          </div>
        ) : null}
      </DragOverlay>
    </DndContext>
  );
};

export default Kanban;
