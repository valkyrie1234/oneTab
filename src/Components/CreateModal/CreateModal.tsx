import React, { useState } from "react";
import Input from "../../uiKit/Input/Input";
import Select from "../../uiKit/Select/Select";
import { statusOptions } from "../../Consts/options";
import { DifficultyStatus } from "../../Consts/status";
import useTasksStore, { ITasks } from "../../store/storeTasks";
import useBoardsStore from "../../store/storeBoards";
import useNotificationStore from "../../store/storeNotifications";
import useAuthStore from "../../store/storeAuth";
import { TasksAPI } from "../../api/client";
import type { IApiResponse } from "../../api/types";
import styles from "./CreateModal.module.css";
import Button from "../../uiKit/Button/Button";
import RangeInput from "../../uiKit/RangeInput/RangeInput";
import useReward from "../../hooks/useReward";

const CreateModal = () => {
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [status, setStatus] = useState<DifficultyStatus>("easy");
  const [gold, setGold] = useState(100);
  const [exp, setExpr] = useState(50);
  const [expiredDate, setExpiredDate] = useState<string>("");
  const [loading, setLoading] = useState(false);

  const { createTask } = useTasksStore();
  const boards = useBoardsStore((state) => state.boards);
  const { user } = useAuthStore();
  const addNotification = useNotificationStore((state) => state.addNotification);
  const { setReward, setExp } = useReward();
  
  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {
    setTitle(e.target.value);
  };

  const onChangeHandler1 = (e: React.ChangeEvent<HTMLInputElement>) => {
    setDescription(e.target.value);
  };

  const onChangeExpiredDate = (e: React.ChangeEvent<HTMLInputElement>) => {
    setExpiredDate(e.target.value);
  };

  const handleStatusChange = (selectedStatus: DifficultyStatus) => {
    setStatus(selectedStatus);
  };

  const createHandler = async () => {
    if (!title || !status || !description) {
      addNotification("warning", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–≤–µ—Å—Ç–∞!", "üìú");
      return;
    }

    if (!user) {
      addNotification("error", "–í–æ–π–¥–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç!", "üö™");
      return;
    }

    setLoading(true);

    try {
      // –ú–∞–ø–ø–∏–Ω–≥ status ‚Üí difficulty –¥–ª—è API
      const difficultyMap = {
        'easy': 'EASY',
        'medium': 'MEDIUM',
        'hard': 'HARD',
        'epic': 'EPIC',
        'completed': 'COMPLETED'
      } as const;

      // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å–∫—É "all tasks" –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
      // –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ –æ–±—â–∏–π –ø—É–ª "all tasks"
      const allTasksBoard = boards.find(b => b.name === 'all tasks');
      const boardId = allTasksBoard?.id || undefined;

      const response = await TasksAPI.create({
        title,
        description,
        difficulty: difficultyMap[status],
        rewardExp: exp,
        rewardGold: gold,
        expiredDate: expiredDate || undefined,
        boardId,
        userId: user.id
      }) as IApiResponse<{ message: string; task: ITasks }>;

      console.log("üìù Response –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:", response);

      if (response.success) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π store
        console.log("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:", response.data.task);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        const taskData = response.data.task;
        if (!taskData.boardId) {
          console.warn("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ boardId, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º null");
        }
        
        createTask(taskData);
        
        // ‚úÖ –£—Å–ø–µ—Ö - –∫–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!
        addNotification(
          "success",
          "‚öîÔ∏è –ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!",
          "üéØ",
          5000
        );

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        setTitle("");
        setDescription("");
        setStatus("easy");
        setExpr(50);
        setGold(100);
        setExpiredDate("");
      } else {
        // ‚ùå –û—à–∏–±–∫–∞ –æ—Ç API
        addNotification(
          "error",
          "‚ò†Ô∏è –ö–≤–µ—Å—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å –≥–∏–ª—å–¥–∏–µ–π...",
          "üõ°Ô∏è",
          6000
        );
      }
    } catch (error) {
      // ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/—Å–µ—Ä–≤–µ—Ä–∞
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞:", error);
      addNotification(
        "error",
        "‚ò†Ô∏è –ö–≤–µ—Å—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å –≥–∏–ª—å–¥–∏–µ–π...",
        "üõ°Ô∏è",
        6000
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.createModalContainer}>
      <Input
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏"
        value={title}
        onChange={onChangeHandler}
      />
      <Input
        label="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
        value={description}
        onChange={onChangeHandler1}
      />
      <Input
        label="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
        type="datetime-local"
        value={expiredDate}
        onChange={onChangeExpiredDate}
      />
      <p>
        –ó–æ–ª–æ—Ç–æ: {gold} {setReward(gold)}
      </p>
      <RangeInput
        max={500}
        inputSize="large"
        value={gold}
        onChange={(e) => setGold(Number(e.target.value))}
      />
      <p>
        exp: {exp} {setExp(exp)}
      </p>
      <RangeInput
        max={500}
        inputSize="large"
        value={exp}
        onChange={(e) => setExpr(Number(e.target.value))}
      />

      <p>–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏</p>
      <Select
        currentStatus={status}
        options={statusOptions}
        onStatusChange={handleStatusChange}
      />
      <Button onClick={() => createHandler()} disabled={loading}>
        {loading ? "‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞..." : "‚öîÔ∏è –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç"}
      </Button>
    </div>
  );
};

export default CreateModal;
